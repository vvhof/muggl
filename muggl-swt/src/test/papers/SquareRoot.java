package test.papers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

/**
 * This class has been generated by Muggl for the automated testing of method
 * test.papers.Paper200809.sqrtRootByNewton(double x).
 * Test cases have been computed using the symbolic execution of Muggl. Muggl
 * is a tool for the fully automated generation of test cases by analysing a
 * program's byte code. It aims at testing any possible flow through the program's
 * code rather than "guessing" required test cases, as a human would do.
 * Refer to http://www.wi.uni-muenster.de/pi/personal/majchrzak.php for more
 * information or contact the author at tim.majchrzak@wi.uni-muenster.de.
 * 
 * Executing the method main(null) will invoke JUnit (if it is in the class path).
 * The methods for setting up the test and for running the tests have also been
 * annotated.
 * 
 * Important settings for this run:
 * Search algorithm:            depth first
 * Time Limit:                  1 minutes
 * Maximum loop cycles to take: 200
 * Maximum instructions before
 * finding a new solution:     infinite
 * 
 * The maximum number of loops was reached at least one time. Setting a higher
 * number of maximum loops to reach before backtracking might lead to a higher
 * number of solutions found.
 * 
 * The total number of solutions found was 24. After deleting redundancy and
 * removing unnecessary solutions, 24 distinct test cases were found.
 * By eliminating solutions based on their contribution to the
 * def-use chain and control graph edge coverage
 * the total number of solutions could be reduced by 19 to the final number of 5 test cases.
 * 
 * Covered def-use chains:		7 of 7
 * Covered control graph edges:	56 of 64
 * 
 * This file has been generated on Monday, 03 November, 2008 5:25 PM.
 * 
 * @author Muggl 1.00 Alpha (unreleased)
 */
public class SquareRoot {
	// Fields for test parameters and expected return values.
	private test.papers.Paper200809 testedClass;
	private double double1_414213562373095;
	private double double2_0;
	private double doublePositiveInfinity;
	private double doubleNegativeInfinity;
	private double doubleNaN;
	private double double32_0;
	private double double1024_0;

	/**
	 * Set up the unit test by initializing the fields to the desired values.
	 */
	@Before public void setUp() {
		this.testedClass = new test.papers.Paper200809();
		this.double1_414213562373095 = 1.414213562373095;
		this.double2_0 = 2.0;
		this.doublePositiveInfinity = Double.POSITIVE_INFINITY;
		this.doubleNegativeInfinity = Double.NEGATIVE_INFINITY;
		this.doubleNaN = Double.NaN;
		this.double32_0 = 32.0;
		this.double1024_0 = 1024.0;
	}

	/**
	 * Run the tests on test.papers.Paper200809.sqrtRootByNewton(double x).
	 */
	@Test public void testIt() {
		assertEquals(this.double1_414213562373095, this.testedClass.squareRootByNewton(this.double2_0), 0.000000001);
		try {
			this.testedClass.squareRootByNewton(this.doublePositiveInfinity);
			fail("Expected a java.lang.IllegalArgumentException to be thrown.");
		} catch (java.lang.IllegalArgumentException e) {
			// Do nothing - this is what we expect to happen!
		}
		try {
			this.testedClass.squareRootByNewton(this.doubleNegativeInfinity);
			fail("Expected a java.lang.IllegalArgumentException to be thrown.");
		} catch (java.lang.IllegalArgumentException e) {
			// Do nothing - this is what we expect to happen!
		}
		try {
			this.testedClass.squareRootByNewton(this.doubleNaN);
			fail("Expected a java.lang.IllegalArgumentException to be thrown.");
		} catch (java.lang.IllegalArgumentException e) {
			// Do nothing - this is what we expect to happen!
		}
		assertEquals(this.double32_0, this.testedClass.squareRootByNewton(this.double1024_0), 0.000000001);
	}

	/**
	 * Invoke JUnit to run the unit tests.
	 * @param args Command line arguments, which are ignored here. Just supply null.
	 */
	public static void main(String args[]) {
		org.junit.runner.JUnitCore.main("test.papers.TestClass16");
	}

}