package test.unitTests;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 * This class has been generated by Muggl for the automated testing of method
 * test.preconditions.InsertionSort.simpleArraySwap(int[] array).
 * Test cases have been computed using the symbolic execution of Muggl. Muggl
 * is a tool for the fully automated generation of test cases by analysing a
 * program's byte code. It aims at testing any possible flow through the program's
 * code rather than "guessing" required test cases, as a human would do.
 * Refer to http://www.wi.uni-muenster.de/pi/personal/majchrzak.php for more
 * information or contact the author at tim.majchrzak@wi.uni-muenster.de.
 * 
 * Executing the method main(null) will invoke JUnit (if it is in the class path).
 * The methods for setting up the test and for running the tests have also been
 * annotated.
 * 
 * Important settings for this run:
 * Search algorithm:            iterative deepening depth first
 * Time Limit:                  15 seconds
 * Maximum loop cycles to take: 200
 * Maximum instructions before
 * finding a new solution:     infinite
 * 
 * The total number of solutions found was 51. After deleting redundancy and
 * removing unnecessary solutions, 51 distinct test cases were found.
 * By eliminating solutions based on their contribution to the
 * def-use chain and control graph edge coverage
 * the total number of solutions could be reduced by 47 to the final number of 4 test cases.
 * 
 * Covered def-use chains:		12 of 12
 * Covered control graph edges:	26 of 32
 * 
 * This file has been generated on Wednesday, 03 September, 2014 14:06.
 * 
 * @author Muggl 1.00 Alpha (unreleased)
 */
public class TestClass4 {
	// Fields for test parameters and expected return values.
	private test.preconditions.InsertionSort testedClass;
	private int int1;
	private int int0;
	private int[] array0 = {0,-1};
	private int[] array1 = {0,0};
	private int[] array2 = null;
	private int[] array3 = {0};

	/**
	 * Set up the unit test by initializing the fields to the desired values.
	 */
	@Before public void setUp() {
		this.testedClass = new test.preconditions.InsertionSort();
		this.int1 = 1;
		this.int0 = 0;
	}

	/**
	 * Run the tests on test.preconditions.InsertionSort.simpleArraySwap(int[] array).
	 */
	@Test public void testIt() {
		assertEquals(this.int1, this.testedClass.simpleArraySwap(this.array0));
		assertEquals(this.int0, this.testedClass.simpleArraySwap(this.array1));
		try {
			this.testedClass.simpleArraySwap(this.array2);
			fail("Expected a java.lang.NullPointerException to be thrown.");
		} catch (java.lang.NullPointerException e) {
			// Do nothing - this is what we expect to happen!
		}
		try {
			this.testedClass.simpleArraySwap(this.array3); // In this solution, not all parameters are used (int array[0] is unused).
			fail("Expected a java.lang.ArrayIndexOutOfBoundsException to be thrown.");
		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
			// Do nothing - this is what we expect to happen!
		}
	}

	/**
	 * Invoke JUnit to run the unit tests.
	 * @param args Command line arguments, which are ignored here. Just supply null.
	 */
	public static void main(String args[]) {
		org.junit.runner.JUnitCore.main("test.unitTests.TestClass4");
	}

}