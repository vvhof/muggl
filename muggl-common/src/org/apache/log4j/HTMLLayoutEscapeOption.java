package org.apache.log4j;

import org.apache.log4j.helpers.Transform;
import org.apache.log4j.spi.LocationInfo;
import org.apache.log4j.spi.LoggingEvent;

/**
 * This Layout for log4j extends the log4j HTMLLayout. It adds a new field, escapeMessages,
 * which has a public visibility. If set to true, a logged event which will be formated
 * with format(LoggingEvent event) will not have the message passed to Transform.escapeTags().
 * Thus, tags are not escaped and will have a influence on the layout of the HTML document
 * generated by the logger.<br />
 * <br />
 * The generally recommended usage is to have escaping enabled. If then a message with
 * HTML tags is to be logged, it should be disabled, the message logged, and right enabled
 * again.<br />
 * <br />
 * The method format(LoggingEvent event) has been copied from the HTMLLayout source code. It
 * is licensed under the Apache License, Version 2.0. Please refer to
 * http://www.apache.org/licenses/LICENSE-2.0 for further details. The only two lines changes
 * in the method have been marked.<br />
 * <br />
 * This file might of course be used under this license. However, it does not apply to the
 * rest of this application. Especially, it does not apply to the package de.wwu.muggl and any of
 * its sub-packages.<br />
 * <br />
 * Last modified: 2010-03-10
 * 
 * @author Tim Majchrzak
 * @version 1.0.0
 */
public class HTMLLayoutEscapeOption extends org.apache.log4j.HTMLLayout {

	/**
	 * Switch for the escaping of messages. If set to true, messages will be escaped.
	 */
	public static boolean escapeMessages = true;
	private StringBuffer sbuf = new StringBuffer(super.BUF_SIZE);

	/**
	 * Format a logging event, send it to the string buffer and
	 * return it as a String.
	 * @param event A LoggingEvent.
	 * @return The formated logging event.
	 */
  	@Override
  	public final String format(final LoggingEvent event) {
  		if (this.sbuf.capacity() > super.MAX_CAPACITY) {
  			this.sbuf = new StringBuffer(super.BUF_SIZE);
  		} else {
  			this.sbuf.setLength(0);
  		}
  		
  		this.sbuf.append(Layout.LINE_SEP + "<tr>" + Layout.LINE_SEP);
  		
  		this.sbuf.append("<td>");
  		this.sbuf.append(event.timeStamp - LoggingEvent.getStartTime());
  		this.sbuf.append("</td>" + Layout.LINE_SEP);
  		
  		String escapedThread = Transform.escapeTags(event.getThreadName());
  		this.sbuf.append("<td title=\"" + escapedThread + " thread\">");
  		this.sbuf.append(escapedThread);
  		this.sbuf.append("</td>" + Layout.LINE_SEP);
  		
  		this.sbuf.append("<td title=\"Level\">");
  		if (event.getLevel().equals(Level.DEBUG)) {
  			this.sbuf.append("<font color=\"#339933\">");
  			this.sbuf.append(Transform.escapeTags(String.valueOf(event.getLevel())));
  			this.sbuf.append("</font>");
  		} else if (event.getLevel().isGreaterOrEqual(Level.WARN)) {
  			this.sbuf.append("<font color=\"#993300\"><strong>");
  			this.sbuf.append(Transform.escapeTags(String.valueOf(event.getLevel())));
  			this.sbuf.append("</strong></font>");
  		} else {
  			this.sbuf.append(Transform.escapeTags(String.valueOf(event.getLevel())));
  		}
  		this.sbuf.append("</td>" + Layout.LINE_SEP);
  		
  		String escapedLogger = Transform.escapeTags(event.getLoggerName());
  		this.sbuf.append("<td title=\"" + escapedLogger + " category\">");
  		this.sbuf.append(escapedLogger);
  		this.sbuf.append("</td>" + Layout.LINE_SEP);
  		
  		if (super.getLocationInfo()) {
  			LocationInfo locInfo = event.getLocationInformation();
  			this.sbuf.append("<td>");
  			this.sbuf.append(Transform.escapeTags(locInfo.getFileName()));
  			this.sbuf.append(':');
  			this.sbuf.append(locInfo.getLineNumber());
  			this.sbuf.append("</td>" + Layout.LINE_SEP);
  		}
  		
  		this.sbuf.append("<td title=\"Message\">");
  		// This block is changed (equivalent to only one line in the original file).
  		if (escapeMessages) {
  			this.sbuf.append(Transform.escapeTags(event.getRenderedMessage()));
  		} else {
  			this.sbuf.append(event.getRenderedMessage());
  		}
  		// This block was changed
  		this.sbuf.append("</td>" + Layout.LINE_SEP);
  		this.sbuf.append("</tr>" + Layout.LINE_SEP);
  		
  		if (event.getNDC() != null) {
  			this.sbuf.append("<tr><td bgcolor=\"#EEEEEE\" style=\"font-size : xx-small;\" colspan=\"6\" title=\"Nested Diagnostic Context\">");
  			this.sbuf.append("NDC: " + Transform.escapeTags(event.getNDC()));
  			this.sbuf.append("</td></tr>" + Layout.LINE_SEP);
  		}
  		
  		String[] s = event.getThrowableStrRep();
  		if (s != null) {
  			this.sbuf.append("<tr><td bgcolor=\"#993300\" style=\"color:White; font-size : xx-small;\" colspan=\"6\">");
  			appendThrowableAsHTML(s, this.sbuf);
  			this.sbuf.append("</td></tr>" + Layout.LINE_SEP);
  		}
  		
  		return this.sbuf.toString();
  	}
  	
}
